<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[云计算及其关键技术]]></title>
      <url>/2017/06/01/My%20Post3/</url>
      <content type="html"><![CDATA[<p><em>摘要： 论文对新兴的计算模型——云计算进行了简要的介绍。论文给出了云计算的定义，介绍了云计算的发展背景和应用场景，分析了云计算和网格计算以及传统超级计算的区别, 总结了云计算的关键技术：存储技术、数据管理技术以及编程模型。<br>关键词：云计算， 数据存储， 数据管理， 编程模型</em></p>
<h1 id="云计算产生背景及定义"><a href="#云计算产生背景及定义" class="headerlink" title="云计算产生背景及定义"></a>云计算产生背景及定义</h1><h2 id="云计算的定义"><a href="#云计算的定义" class="headerlink" title="云计算的定义"></a>云计算的定义</h2><p>云计算(Cloud Computing)是一种新近提出的计算模式。维基百科给云计算下的定义：云计算将IT相关的能力以服务的方式提供给用户，允许用户在不了解提供服务的技术、没有相关知识以及设备操作能力的情况下，通过Internet获取需要服务[1]。<br>中国云计算网将云定义为：云计算是分布式计算（Distributed Computing）、并行计算（Parallel Computing）和网格计算（Grid Computing）的发展，或者说是这些科学概念的商业实现[2]。　<br>Forrester Research 的分析师 James Staten 定义云为:“云计算是一个具备高度扩展性和管理性并能够胜任终端用户应用软件计算基础架构的系统池” 。<br>虽然目前云计算没有统一的定义，结合上述定义，可以总结出云计算的一些本质特征，即分布式计算和存储特性，高扩展性，用户友好性，良好的管理性。云计算技术具有以下特点：</p>
<ol>
<li>云计算系统提供的是服务。服务的实现机制对用户透明，用户无需了解云计算的具体机制，就可以获得需要的服务。</li>
<li>用冗余方式提供可靠性。云计算系统由大量商用计算机组成机群向用户提供数据处理服务。随着计算机数量的增加，系统出现错误的概率大大增加。在没有专用的硬件可靠性部件的支持下，采用软件的方式，即数据冗余和分布式存储来保证数据的可靠性。</li>
<li>高可用性。通过集成海量存储和高性能的计算能力，云能提供一定满意度的服务质量。云计算系统可以自动检测失效节点，并将失效节点排除，不影响系统的正常运行。</li>
<li>高层次的编程模型。云计算系统提供高级别的编程模型。用户通过简单学习，就可以编写自己的云计算程序，在“ 云” 系统上 </li>
<li>执行，满足自己的需求。现在云计算系统主要采用Map- Reduce模型。</li>
<li>经济性。组建一个采用大量的商业机组成的机群相对于同样性能的超级计算机花费的资金要少很多。<h2 id="云计算的应用场景"><a href="#云计算的应用场景" class="headerlink" title="云计算的应用场景"></a>云计算的应用场景</h2>云计算有着广泛的应用前景。如表1所示：<br><img src="/images/1.jpg" alt="alt 表一" title="表1 云计算的应用领域"><br>云计算在天文学、医学等各个领域有着广泛的应用前景。趋势科技和瑞星等安全厂商纷纷提出了“ 安全云” 计划。如今，每天有2万多种新的病毒和木马产生，传统的通过更新用户病毒库的防毒模式，受到了严峻的挑战，用户端的病毒库将过于庞大。趋势科技和瑞星的“ 安全云” 将病毒资料库放在“ 云” 端，与客户端通过网络相连，当“ 云” 在网络上发现不安全链接时，可以直接形成判断，阻止其进入用户机器，从根本上保护机器的安全。<br>据趋势科技大中华区执行总裁张伟钦介绍，趋势科技已投入了大量资金，在全球数个地方建设了新型数据中心。同时，趋势科技还花费了1000多万美元，租借了34000多台服务器，构建了一个服务遍及全球的“ 安全云” 。目前趋势科技已将公司中低端的部分产品线放到“ 云安全” 计划中，而高端的大部分产品线，仍在准备过程中。<br>谷歌提供的Gmail、Google Earth、Google Analytics 等服务都基于其云计算服务器运行。谷歌基于云计算提供的翻译服务具有现今最好的性能。对互联网和美国人生活的一项研究显示，大约70%的在线用户使用以上“ 云计算” 服务。<h2 id="云计算的发展"><a href="#云计算的发展" class="headerlink" title="云计算的发展"></a>云计算的发展</h2>目前，亚马逊，微软，谷歌，IBM，Intel等公司纷纷提出了“ 云计划” 。例如亚马逊的AWS (Amazon Web Services)[3]、IBM和谷歌联合进行的“ 蓝云” 计划等。这对云计算的商业价值给予了巨大的肯定。同时学术界也纷纷对云计算进行深层次的研究。例如谷歌同华盛顿大学以及清华大学合作，启动云计算学术合作计划(Academic Cloud Computing Initiative)，推动云计算的普及，加紧对云计算的研究。美国卡耐基梅陇大学等提出对数据密集型的超级计算（DISC：Data Intensive SuperComputing）进行研究，本质上也是对云计算相关技术开展研究。<br>IDC的调查显示，未来五年云计算服务将急速增长，预期2012年市场规模可达420亿美元。目前企业导入云计算已逐渐普及，并且有逐年成长趋势。估计在2012年，企业投入在云计算服务的支出将占整体IT成本的25%，甚至在2013年提高至IT总支出的三分之一。<br>由此可见，在各大公司以及学术界的共同推动下，云计算技术将会持续发展。<h2 id="云计算与其他超级计算的区别"><a href="#云计算与其他超级计算的区别" class="headerlink" title="云计算与其他超级计算的区别"></a>云计算与其他超级计算的区别</h2><h3 id="云计算与网格计算的区别"><a href="#云计算与网格计算的区别" class="headerlink" title="云计算与网格计算的区别"></a>云计算与网格计算的区别</h3>Ian Foster 将网格定义为：支持在动态变化的分布式虚拟组织（Virtual Organizations）间共享资源，<br>协同解决问题的系统[4]。所谓虚拟组织就是一些个人、组织或资源的动态组合。<br><img src="/images/2.jpg" alt="alt 图一" title="图1 云系统的结构"><br><img src="/images/3.jpg" alt="alt 图二" title="图2 网格的结构"><br>图1和图2分别为云及网格的结构示意图。图1 显示，云计算是一种生产者—消费者模型，云计算系统采用以太网等快速网络将若干机群连接在一起，用户通过因特网获取云计算系统提供的各种数据处理服务。图2显示，网格系统是一种资源共享模型，资源提供者亦可以成为资源消费者，网格侧重研究的是如何将分散的资源组合成动态虚拟组织。<br>云计算和网格计算的一个重要区别在于资源调度模式。云计算采用机群来存储和管理数据资源，运行的任务以数据为中心。即调度计算任务到数据存储节点运行。而网格计算，则以计算为中心。计算资源和存储资源分布在因特网的各个角落，不强调任务所需的计算和存储资源同处一地。由于网络带宽的限制，网格计算中的数据传输时间占总运行时间的很大一部分。<h3 id="云计算系统与传统超级计算机的区别"><a href="#云计算系统与传统超级计算机的区别" class="headerlink" title="云计算系统与传统超级计算机的区别"></a>云计算系统与传统超级计算机的区别</h3>超级计算机拥有强大的处理能力，特别是计算能力。2008年11月17日，最新一期的Top500[5]榜单发布。冠军“ RoadRunner” 是IBM为美国 Los Alamos 国家实验室建造的计算机系统。它的运算速度达到了<br>1.026 Petaflop/s。RoadRuner超级计算机包含12960个<br>IBM PowerXcell 8i处理器以及6948个分布于刀片服务器上的AMD Opteron芯片刀片服务器安装在288个IBM BladCener机架上。RoadRuner拥有80TB的内存，外存使用1.5PB容量的Panasas存储，外存通过10Gb/秒以太网进行连接。耗资超过1亿美元。<br>TOP500对超级计算机的排名方式可以看出，传统的超级计算机注重运算速度和任务的吞吐率。以运算速度为核心进行计算机的研究和开发。而云计算则以数据为中心，同时兼顾系统的运算速度。传统的超级计算机耗资巨大，远超云计算系统。例如，趋势科技花费1000多万美元租用34000多台服务器，构建自身的“ 安全云” 系统。<h1 id="数据存储技术"><a href="#数据存储技术" class="headerlink" title="数据存储技术"></a>数据存储技术</h1>为了满足云计算的分布式存储方式、同时保证数据可靠性和高吞吐率以及高传输率的需求。目前各IT厂商多采用GFS或HDFS的数据存储技术。<br>以GFS为例。GFS是一个管理大型分布式数据密集型计算的可扩展的分布式文件系统。它使用廉价的商用硬件搭建系统并向大量用户提供容错的高性能的服务。<br>GFS和普通的分布式文件系统有以下区别，如表2所示：<br><img src="/images/4.jpg" alt="alt 表二" title="表2 GFS与传统分布式文件系统的区别"><br>GFS系统由一个Master和大量块服务器构成。 Master存放文件系统的所有的元数据，包括名字空间、存取控制、文件分块信息、文件块的位置信息等。GFS中的文件切分为64MB的块进行存储。<br>在GFS文件系统中，采用冗余存储的方式来保证数据的可靠性。每份数据在系统中保存3个以上的备份。为了保证数据的一致性，对于数据的所有修改需要在所有的备份上进行，并用版本号的方式来确保所有备份处于一致的状态。<br>客户端不通过Master读取数据，避免了大量读操作使Master成为系统瓶颈。客户端从Master获取目标数据块的位置信息后，直接和块服务器交互进行读操作。<br>GFS的写操作将写操作控制信号和数据流分开，如图3所示：<br><img src="/images/5.jpg" alt="alt 图三" title="图3 写控制信号和写数据流"><br>即，客户端在获取Master的写授权后，将数据传输给所有的数据副本，在所有的数据副本都收到修改的数据后，客户端才发出写请求控制信号。在所有的数据副本更新完数据后，由主副本向客户端发出写操作完成控制信号。<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1>综上所述，云计算是一种新型的计算模式。它的最主要特征是系统拥有大规模数据集、基于该数据集，向用户提供服务。它使用大量的普通商用机来构建系统，通过冗余存储的方式确保整个系统的可靠性和可用性。与传统超级计算机在底层编程不同，数据密集计算的云系统上使用基于MapReduce的高级编程模式。这使得编程人员可以不用考虑底层的并行化方式，专心与程序的逻辑实现。普通用户经过简单的学习，可以编写出满足自身需要的简单程序。<br>越来越多的IT厂商提出了自己的“ 云” 计划，并投入大量资金推动云计算的发展。这恰恰为云计算提供了良好的发展机遇。虽然现在的云计算并不能完美地解决所有的问题，但是在不久的将来，一定会有越来越多的云计算系统投入实用，云计算系统也会不断地被完善，并推动其他科学技术的发展。<h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1>[1] 维基百科。<a href="http://en.wikipedia.org/wiki/Cloud_computing" target="_blank" rel="external">http://en.wikipedia.org/wiki/Cloud_computing</a><br>[2] 中国云计算网。 <a href="http://www.cloudcomputing-china.cn/Article/ShowArticle.asp?ArticleID=1" target="_blank" rel="external">http://www.cloudcomputing-china.cn/Article/ShowArticle.asp?ArticleID=1</a><br>[3] Jinesh Varia. Cloud architectures- Amazon web services [EB/OL]. ACM Monthly Tech Talk , <a href="http://acmbangalore.org/" target="_blank" rel="external">http://acmbangalore.org/</a> events/monthly-talk/may-2008–cloud-architectures—amazon-web-services.html, May, 2008<br>[4] IAN FOSTER; CARL KESSELMAN; STEVEN TUECKE. The anatomy of the grid enabling scalable virtual organizations. International Journal of High Performance Computing Applications. August 2001, 15(3): 200-222<br>[5] Top 500 supercomputing sites. <a href="http://www.top500.org/" target="_blank" rel="external">http://www.top500.org/</a> </li>
</ol>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Post3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/06/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Hello </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给人工智能泼冷水]]></title>
      <url>/2017/06/01/My%20Post2/</url>
      <content type="html"><![CDATA[<h2 id="给人工智能泼冷水"><a href="#给人工智能泼冷水" class="headerlink" title="给人工智能泼冷水"></a>给人工智能泼冷水</h2><p>眼下人们正热烈追捧一则新闻，说是机器首次通过了图灵测试，我看到一条又一条的评论，都在高呼人工智能进入了全新时代。可是，我却一点儿也高兴不起来，因为我满脑子都是怀疑——这是真的吗</p>
<hr>
<h3 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h3><p>先说<strong>图灵测试</strong>，它是测试人在与被测试者（机器）隔开的情况下，通过一些装置向被测试者随意提问。问过一些问题后，如果被测试者超过30%的答复不能使测试人确认哪个是人、哪个是机器的回答，那么它就通过了测试，并被认为具有人类智能。</p>
<p>现在问题来了。图灵测试的比赛进行了这么多年，参赛者也学“聪明”了。它们甚至根据历届裁判的提问方式，设计出一套欺骗裁判的回答。</p>
<p>比如说，裁判问：“你是从俄罗斯来的吗？”机器就会回答：“你为什么不确定我是从俄罗斯来的？”这种反问式策略最初是心理咨询上的治疗手段，目前已被大量使用在图灵测试的游戏中。这并不是人与机器的智力博弈，这只是利用计算脚本和自己设计的数据库搭配着耍小聪明。</p>
<p>简单地说，这些伪人工智能由于无法给出真正正确的答案，所以它们只能给出一个模棱两可的答案，而真正的人工智能则应当给出真正的答案，让人感受到机器灵魂的存在，而不是给人造成迷惑，这与图灵最初的设想早已背道而驰。</p>
<hr>
<h3 id="人工智能经典案例"><a href="#人工智能经典案例" class="headerlink" title="人工智能经典案例"></a>人工智能经典案例</h3><p>如果这些不能说服你，那我们来说说曾经的一个案例。人工智能最显赫的历史战绩，莫过于IBM的”深蓝Ⅱ”后来我看到一本叫《<strong>信号与噪声</strong>》的书。从棋局上看，“深蓝Ⅱ”的确战胜了卡斯帕罗夫。但有趣的是，当卡斯帕罗夫去找“深蓝Ⅱ”再战的时候，IBM拒绝了他的请求，不久后“深蓝Ⅱ”被拆，也让人工智能击败人类国际象棋大师终成定史。</p>
<p>但是，我读完了书中的记录，却发现，最大的可能在于其实他们心虚。因为，事实上击败卡斯帕罗夫的并不是什么人工智能，而是一个bug，是程序设计上的一个漏洞。</p>
<p>为什么这么说呢？在第一局比赛的时候，虽然“深蓝Ⅱ”每秒可计算两亿步棋，但卡斯帕罗夫还是轻而易举地赢了比赛。所有计算都在大师思考的范围内，这充分说明了计算机的弱势。</p>
<p>然而，下第一局棋时却发生了一件事，影响了卡斯帕罗夫的判断。在第一局的第44步棋，“深蓝Ⅱ”的出棋毫无目的性，让卡斯帕罗夫吓了一跳。书中记录说，“这步棋让卡斯帕罗夫感到紧张，他觉得这有悖直觉的一步棋必是一步高招”，他开始紧张，方寸大乱，自乱阵脚。从第二局开始，他输了一局又一局。在后来的采访中，卡斯帕罗夫说，他那时候头脑非常乱，完全不想比赛。</p>
<p>但是，在书中的解释里，这件事的事实是——第一局的第44步棋，是计算机的“系统故障”。它使计算机失去选择经过精心分析的步骤的可能性，结果采用较安全的任意走法。这一步棋没有产生任何效果，而在开始第二局棋前，这个“系统故障”也被修正了。</p>
<p>这步bug棋却深深影响到了卡斯帕罗夫。他对《信号与噪声》的作者纳特·西尔弗说：“我根本没有想到，这一步棋并无理论支持，而是系统故障的结果。”</p>
<p>幸与不幸，一个无足轻重的系统故障，帮助计算机打败了国际象棋大师卡斯帕罗夫。人们评价这件事的时候，总是说，第二局明明可以和棋，卡斯帕罗夫却犯下致命错误，这就是人类的局限。但事实上，“在卡斯帕罗夫看来，‘深蓝Ⅱ’下棋有棋感并且有深意，超凡脱俗，智慧过人。他却从来没有想到过，这实际上只是因电脑系统故障导致计算瘫痪而走出的一步任意棋”。</p>
<h3 id="总结与教训"><a href="#总结与教训" class="headerlink" title="总结与教训"></a>总结与教训</h3><p>也许正是这样的例子，让我每一次看到“划时代的IT创举”时都会心里一惊——人们对于技术的陌生，总会让另一群人有机会把一件小事说得天花乱坠。但是静下来踏踏实实地想一想，这些梦幻似的结论，是真的吗？</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Post2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MarkdownPad]]></title>
      <url>/2017/05/30/My%20Post1/</url>
      <content type="html"><![CDATA[<h2 id="Welcome-to-MarkdownPad"><a href="#Welcome-to-MarkdownPad" class="headerlink" title="Welcome to MarkdownPad"></a>Welcome to MarkdownPad</h2><p><strong>MarkdownPad</strong> is a full-featured Markdown editor for Windows.</p>
<h3 id="Built-exclusively-for-Markdown"><a href="#Built-exclusively-for-Markdown" class="headerlink" title="Built exclusively for Markdown"></a>Built exclusively for Markdown</h3><p>Enjoy first-class Markdown support with easy access to  Markdown syntax and convenient keyboard shortcuts.</p>
<p>Give them a try:</p>
<ul>
<li><strong>Bold</strong> (<code>Ctrl+B</code>) and <em>Italic</em> (<code>Ctrl+I</code>)</li>
<li>Quotes (<code>Ctrl+Q</code>)</li>
<li>Code blocks (<code>Ctrl+K</code>)<a href="http://markdownpad.com" target="_blank" rel="external">http://markdownpad.com</a></li>
<li>Headings 1, 2, 3 (<code>Ctrl+1</code>, <code>Ctrl+2</code>, <code>Ctrl+3</code>)</li>
<li>Lists (<code>Ctrl+U</code> and <code>Ctrl+Shift+O</code>)</li>
</ul>
<h3 id="See-your-changes-instantly-with-LivePreview"><a href="#See-your-changes-instantly-with-LivePreview" class="headerlink" title="See your changes instantly with LivePreview"></a>See your changes instantly with LivePreview</h3><p>Don’t guess if your <a href="http://markdownpad.com" target="_blank" rel="external">hyperlink syntax</a> is correct; LivePreview will show you exactly what your document looks like every time you press a key.</p>
<h3 id="Make-it-your-own"><a href="#Make-it-your-own" class="headerlink" title="Make it your own"></a>Make it your own</h3><p>Fonts, color schemes, layouts and stylesheets are all 100% customizable so you can turn MarkdownPad into your perfect editor.</p>
<h3 id="A-robust-editor-for-advanced-Markdown-users"><a href="#A-robust-editor-for-advanced-Markdown-users" class="headerlink" title="A robust editor for advanced Markdown users"></a>A robust editor for advanced Markdown users</h3><p>MarkdownPad supports multiple Markdown processing engines, including standard Markdown, Markdown Extra (with Table support) and GitHub Flavored Markdown.</p>
<p>With a tabbed document interface, PDF export, a built-in image uploader, session management, spell check, auto-save, syntax highlighting and a built-in CSS management interface, there’s no limit to what you can do with MarkdownPad.</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Post1 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
